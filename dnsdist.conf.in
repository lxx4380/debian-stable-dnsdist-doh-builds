-- disable security status polling via DNS
setSecurityPollSuffix("")

-- listen and allow all inbounds
addACL('0.0.0.0/0')
addDOHLocal("0.0.0.0:${PORT}", nil, nil, "${ENDPOINT_PATH}", {doTCP=true, reusePort=true})
addDOHLocal("[::]:${PORT}", nil, nil, "${ENDPOINT_PATH}", {doTCP=true, reusePort=true})

-- Google Public DNS
-- https://developers.google.com/speed/public-dns/docs/doh
newServer({address='8.8.8.8:443', tls='openssl', subjectName='dns.google', dohPath='/dns-query', validateCertificates=true, maxInFlight=100, healthCheckMode='lazy', checkInterval=30, lazyHealthCheckFailedInterval=5, rise=3, maxCheckFailures=5, lazyHealthCheckThreshold=6, lazyHealthCheckSampleSize=10,  lazyHealthCheckMinSampleCount=5})
newServer({address='8.8.4.4:443', tls='openssl', subjectName='dns.google', dohPath='/dns-query', validateCertificates=true, maxInFlight=100, healthCheckMode='lazy', checkInterval=30, lazyHealthCheckFailedInterval=5, rise=3, maxCheckFailures=5, lazyHealthCheckThreshold=6, lazyHealthCheckSampleSize=10,  lazyHealthCheckMinSampleCount=5})

-- Cloudflare DNS
-- https://developers.cloudflare.com/1.1.1.1/encryption/dns-over-https/
newServer({address='1.1.1.1:443', tls='openssl', subjectName='1.1.1.1', dohPath='/dns-query', validateCertificates=true, maxInFlight=100, healthCheckMode='lazy', checkInterval=30, lazyHealthCheckFailedInterval=5, rise=3, maxCheckFailures=5, lazyHealthCheckThreshold=6, lazyHealthCheckSampleSize=10,  lazyHealthCheckMinSampleCount=5})
newServer({address='1.0.0.1:443', tls='openssl', subjectName='1.0.0.1', dohPath='/dns-query', validateCertificates=true, maxInFlight=100, healthCheckMode='lazy', checkInterval=30, lazyHealthCheckFailedInterval=5, rise=3, maxCheckFailures=5, lazyHealthCheckThreshold=6, lazyHealthCheckSampleSize=10,  lazyHealthCheckMinSampleCount=5})

